stages:
  - validate
  - package-release

variables:
  RELEASES_DIR: "releases"
  CHART_DIR: "helm-chart"

validate-version:
  stage: validate
  image: ubuntu:latest
  before_script:
    - echo "Installing required tools - yq & Git..."
    - apt-get update && apt-get install -y git yq
  script:
    - echo "Validating commit tag for versioning..."
    - |
      # Ensure the pipeline is triggered by a tag
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        echo "This pipeline should only be triggered by tags."
        exit 1
      fi

      # Read current version from Chart.yaml
      VERSION=$(yq eval '.version' ${CHART_DIR}/Chart.yaml)
      echo "Current version: ${VERSION}"

      # Check if Chart.yaml is modified in the current commit
      if git diff --name-only $CI_COMMIT_BEFORE_SHA $CI_COMMIT_SHA | grep -q "${CHART_DIR}/Chart.yaml"; then
        echo "Chart.yaml modified. Version update not required."
      else
        # Determine the new version based on the tag
        case "$CI_COMMIT_TAG" in
          major)
            NEW_VERSION=$(echo $VERSION | awk -F. '{$1 += 1; $2 = 0; $3 = 0; print $1 "." $2 "." $3}')
            ;;
          minor)
            NEW_VERSION=$(echo $VERSION | awk -F. '{$2 += 1; $3 = 0; print $1 "." $2 "." $3}')
            ;;
          patch)
            NEW_VERSION=$(echo $VERSION | awk -F. '{$3 += 1; print $1 "." $2 "." $3}')
            ;;
          *)
            echo "Invalid tag. Use 'major', 'minor', or 'patch'."
            exit 1
            ;;
        esac

        echo "New version: ${NEW_VERSION}"

        # Update Chart.yaml with the new version
        yq eval ".version = \"$NEW_VERSION\"" -i ${CHART_DIR}/Chart.yaml

        # Commit the updated Chart.yaml
        git config --global user.name "GitLab CI"
        git config --global user.email "ci@example.com"
        git add ${CHART_DIR}/Chart.yaml
        git commit -m "Update chart version to ${NEW_VERSION}"
      fi
  rules:
    - changes:
        - helm-chart/*
      exists:
        - ${CI_COMMIT_TAG}
      if: '$CI_COMMIT_TAG =~ /^(major|minor|patch)$/'

package-release-chart:
  stage: package-release
  image: ubuntu:latest
  before_script:
    - echo "Installing required tools - helm..."
    - apt-get update && apt-get install -y curl git
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
  script:
    # Package the Helm chart
    - echo "Packaging Helm chart..."
    - mkdir -p ${RELEASES_DIR}
    - helm package ${CHART_DIR} --destination ${RELEASES_DIR}
    - echo "Chart packaged and stored in ${RELEASES_DIR}/"
    # Push the Helm chart to the repository
    - echo "Pushing release to repository..."
    - git config --global user.name "GitLab CI"
    - git config --global user.email "ci@example.com"
    - git remote set-url origin https://gitlab-ci-token:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}.git
    - git add ${RELEASES_DIR}
    - git commit -m "Update releases with new chart version"
    - git push origin $CI_COMMIT_REF_NAME
  dependencies:
    - validate-version
  rules:
    - changes:
        - helm-chart/*
      exists:
        - ${CI_COMMIT_TAG}
      if: '$CI_COMMIT_TAG =~ /^(major|minor|patch)$/'
