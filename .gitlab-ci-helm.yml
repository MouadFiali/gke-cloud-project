stages:
  - validate
  - package-release

variables:
  CHART_DIR: "helm-chart"
  HELM_REPOSITORY: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/stable"

validate-version:
  stage: validate
  image: alpine:latest
  before_script:
    - echo "Installing required tools - yq, Git & bash..."
    - apk add --no-cache git curl bash
    - curl -sLo /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.6/yq_linux_amd64
    - chmod +x /usr/bin/yq
  script:
    - |
      #!/bin/bash
      echo "Validating commit message for versioning..."
      
      # Ensure the pipeline is triggered by a commit message that includes #major, #minor, or #patch
      if ! echo "$CI_COMMIT_MESSAGE" | grep -qE '#(major|minor|patch)'; then
        echo "Commit message must include '#major', '#minor', or '#patch'."
        exit 1
      fi

      # Read current version from Chart.yaml
      VERSION=$(yq eval '.version' ${CHART_DIR}/Chart.yaml)
      echo "Current version: ${VERSION}"

      # Determine the new version based on the commit message
      if echo "$CI_COMMIT_MESSAGE" | grep -q '#major'; then
        NEW_VERSION=$(echo $VERSION | awk -F. '{$1 += 1; $2 = 0; $3 = 0; print $1 "." $2 "." $3}')
      elif echo "$CI_COMMIT_MESSAGE" | grep -q '#minor'; then
        NEW_VERSION=$(echo $VERSION | awk -F. '{$2 += 1; $3 = 0; print $1 "." $2 "." $3}')
      elif echo "$CI_COMMIT_MESSAGE" | grep -q '#patch'; then
        NEW_VERSION=$(echo $VERSION | awk -F. '{$3 += 1; print $1 "." $2 "." $3}')
      fi

      echo "New version: ${NEW_VERSION}"

      # Update Chart.yaml with the new version
      yq eval ".version = \"$NEW_VERSION\"" -i ${CHART_DIR}/Chart.yaml

      # Commit the updated Chart.yaml
      git config --global user.name "GitLab CI"
      git config --global user.email "ci@example.com"
      git add ${CHART_DIR}/Chart.yaml
      git commit -m "CI - Update chart version to ${NEW_VERSION}"
      git push https://gitlab-ci-token:${GITLAB_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git HEAD:${CI_COMMIT_REF_NAME}
  rules: 
    - if: '$CI_COMMIT_MESSAGE =~ /#(major|minor|patch)/'
      changes:  
        - helm-chart/**/*

package-release-chart:
  stage: package-release
  image: alpine:latest
  before_script:
    - echo "Installing required tools - helm..."
    - apk add --no-cache curl git bash openssl
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
  script:
    - echo "Pulling latest changes..."
    - git pull origin ${CI_COMMIT_REF_NAME}
    - echo "Packaging Helm chart..."
    - helm package ${CHART_DIR}
    - CHART_VERSION=$(helm show chart ${CHART_DIR} | grep version | cut -d' ' -f2)
    - CHART_NAME=$(helm show chart ${CHART_DIR} | grep name | cut -d' ' -f2)
    - |
      echo "Uploading chart to GitLab registry..."
      curl --fail-with-body \
        --request POST \
        --user gitlab-ci-token:${CI_JOB_TOKEN} \
        --form "chart=@${CHART_NAME}-${CHART_VERSION}.tgz" \
        "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
    - echo "Chart pushed to GitLab registry"
  dependencies:
    - validate-version
  rules: 
    - if: '$CI_COMMIT_MESSAGE =~ /#(major|minor|patch)/'
      changes:  
        - helm-chart/**/*