---
# This Ansible playbook is used to setup Prometheus stack on a GCP Kubernetes cluster.
- name: Setup Prometheus stack on GCP Kubernetes cluster
  hosts: localhost # This playbook is run on the local machine as kubectl can be run locally.
  vars:
    tracing: "{{ tracing | default('false') }}"
    logging: "{{ logging | default('false') }}"
  tasks:
    # This task creates a namespace named 'monitoring' in the Kubernetes cluster.
    - name: Create monitoring namespace
      shell: kubectl create namespace monitoring

    ## Check if Helm is installed
    - name: Check if Helm is installed
      command: helm version --short
      register: helm_installed
      ignore_errors: true

    # This task downloads the Helm installation script if Helm is not installed
    - name: Download Helm script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        dest: /tmp/get-helm-3
        mode: '0755'
      when: helm_installed.failed

    # This task runs the Helm installation script if Helm is not installed
    - name: Run Helm script
      shell: /tmp/get-helm-3
      when: helm_installed.failed
    
    # This task removes the get-helm-3 script from the local machine after Helm is installed
    - name: Remove Helm script
      file:
        path: /tmp/get-helm-3
        state: absent
      when: helm_installed.failed

    # This task adds the Prometheus Helm chart repository.
    - name: Add Prometheus Helm chart repository
      shell: helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

    # This task updates the Helm chart repositories.
    - name: Update Helm chart repositories
      shell: helm repo update

    # Create ConfigMaps for the dashboards
    - name: Create ConfigMaps for dashboards
      shell: |
        kubectl create configmap istio-canary-dashboard --from-file=istio-canary-dashboard.json=dashboards/istio_canary_dashboard.json -n monitoring
        kubectl create configmap load-generator-dashboard --from-file=load-generator-dashboard.json=dashboards/load_generator_dashboard.json -n monitoring
        kubectl create configmap tempo-tracing-dashboard --from-file=tempo-tracing-dashboard.json=dashboards/tempo_tracing_dashboard.json -n monitoring
        kubectl create configmap redis-exporter-dashboard --from-file=redis-exporter-dashboard.json=dashboards/redis_exporter_dashboard.json -n monitoring  

    # This task installs the Prometheus stack using Helm with custom values
    - name: Install Prometheus stack using Helm
      shell: >
        helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack 
        --namespace monitoring 
        --values custom-values/prom-grafana-values.yaml

    # Label the ConfigMaps for Grafana to pick the dashboards
    - name: Add labels and annotations to ConfigMaps
      shell: |
        kubectl label configmap istio-canary-dashboard -n monitoring grafana_dashboard="1"
        kubectl annotate configmap istio-canary-dashboard -n monitoring grafana-folder=istio-dashboards
        kubectl label configmap load-generator-dashboard -n monitoring grafana_dashboard="1"
        kubectl annotate configmap load-generator-dashboard -n monitoring grafana-folder=custom-dashboards
        kubectl label configmap tempo-tracing-dashboard -n monitoring grafana_dashboard="1"
        kubectl annotate configmap tempo-tracing-dashboard -n monitoring grafana-folder=custom-dashboards
        kubectl label configmap redis-exporter-dashboard -n monitoring grafana_dashboard="1"
        kubectl annotate configmap redis-exporter-dashboard -n monitoring grafana-folder=custom-dashboards
    
    # Add Grafana Tempo helm repo
    - name: Add Grafana Tempo helm repo
      shell: helm repo add grafana https://grafana.github.io/helm-charts

    # Install Tempo
    - name: Install Tempo
      shell: >
        helm install tempo grafana/tempo
        --namespace monitoring
        --values custom-values/tempo-values.yaml
      when: tracing | bool

    # Install Loki
    - name: Install Loki
      shell: >
        helm install loki grafana/loki
        --namespace monitoring
        --values custom-values/loki-custom-values.yaml
      when: logging | bool
    # # This task waits for all pods in the 'monitoring' namespace to be running.
    # - name: wait for All pods to be running
    #   shell: kubectl get pods -n monitoring --field-selector=status.phase!=Running
    #   register: prometheus_service_check
    #   until: prometheus_service_check.stdout == ""
    #   retries: 10
    #   delay: 10