---
- name: Setup Istio and Flagger on GCP Kubernetes cluster
  hosts: localhost
  vars:
    app_namespace: "{{ app_namespace | default('app') }}"
    sidecars: "{{ sidecars | default('false') }}"
    virtual_service: "{{ virtual_service | default('false') }}"
    canary: "{{ canary | default('false') }}"

  tasks:
    - name: Check if playbook should continue
      meta: end_play
      when: sidecars | lower == 'false'

    - name: Read service account email from json
      shell: |
        jq -r .client_email ../project-sa.json
      register: sa_email

    - name: Check if cluster admin binding exists
      shell: kubectl get clusterrolebinding cluster-admin-binding
      register: binding_check
      ignore_errors: true

    - name: Grant cluster admin permissions
      shell: |
        kubectl create clusterrolebinding cluster-admin-binding \
          --clusterrole=cluster-admin \
          --user="{{ sa_email.stdout }}"
      when: binding_check.rc != 0

    - name: Add Helm repositories
      shell: "{{ item.command }}"
      loop:
        - { command: "helm repo add istio https://istio-release.storage.googleapis.com/charts" }
        - { command: "helm repo add flagger https://flagger.app" }
        - { command: "helm repo add kiali https://kiali.org/helm-charts" }
      register: repo_add
      changed_when: "'has been added' in repo_add.stderr"
      failed_when: 
        - repo_add.rc != 0 
        - "'already exists' not in repo_add.stderr"

    - name: Update Helm repositories
      shell: helm repo update
      register: repo_update
      changed_when: repo_update.rc == 0

    - name: Check if istio-system namespace exists
      shell: kubectl get namespace istio-system
      register: istio_namespace_check
      ignore_errors: true

    - name: Check existing Istio installation
      shell: helm list -n istio-system
      register: helm_list
      ignore_errors: true
      when: istio_namespace_check.rc == 0

    - name: Install Istio base chart
      shell: helm upgrade --install istio-base istio/base -n istio-system --set defaultRevision=default --create-namespace
      register: base_install
      when: >
        istio_namespace_check.rc != 0 or
        (helm_list.stdout is defined and 'istio-base' not in helm_list.stdout)

    - name: Wait for Istio CRDs to be established
      shell: |
        kubectl wait --for=condition=Established crd --all -n istio-system --timeout=300s
      register: crd_wait
      retries: 3
      delay: 10
      until: crd_wait.rc == 0

    - name: Install Istio discovery chart
      shell: helm upgrade --install istiod istio/istiod -n istio-system --wait
      register: istiod_install

    - block:
      - name: Install Flagger's Canary CRD
        shell: kubectl apply -f https://raw.githubusercontent.com/fluxcd/flagger/main/artifacts/flagger/crd.yaml
        register: flagger_crd

      - name: Wait for Flagger CRDs to be established
        shell: |
          kubectl wait --for=condition=Established crd/canaries.flagger.app --timeout=300s
        register: flagger_crd_wait
        retries: 3
        delay: 10
        until: flagger_crd_wait.rc == 0
        
      - name: Deploy Flagger for Istio
        shell: >
          helm upgrade -i flagger flagger/flagger 
          --namespace=istio-system 
          --set crd.create=false 
          --set meshProvider=istio 
          --set metricsServer=http://kube-prometheus-stack-prometheus.monitoring:9090
          --wait
        register: flagger_install
      when: canary | lower == 'true'

    - block:
      - name: Check if asm-ingress namespace exists
        shell: kubectl get namespace asm-ingress
        register: asm_namespace_check
        ignore_errors: true

      - name: Create asm-ingress namespace
        shell: kubectl create namespace asm-ingress
        when: asm_namespace_check.rc != 0

      - name: Label asm-ingress namespace
        shell: |
          kubectl label namespace asm-ingress istio-injection=enabled --overwrite=true
          kubectl label namespace asm-ingress name=asm-ingress --overwrite=true
        register: label_asm_ingress

      - name: Deploy ASM components with kubectl apply
        shell: "{{ item }}"
        loop:
          - kubectl apply -f https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/raw/main/docs/ingress-gateway-asm-manifests/base/deployment-service.yaml -n asm-ingress
          - kubectl apply -f https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/raw/main/docs/ingress-gateway-asm-manifests/base/gateway.yaml -n asm-ingress
          - kubectl apply -f https://github.com/GoogleCloudPlatform/anthos-service-mesh-samples/raw/main/docs/ingress-gateway-asm-manifests/with-authorization-policies/authorizationpolicy.yaml -n asm-ingress
        register: deploy_asm

      - name: Wait for ASM ingress gateway deployment
        shell: kubectl wait --for=condition=Available deployment/asm-ingressgateway -n asm-ingress --timeout=300s
        register: wait_asm_gateway
        retries: 3
        delay: 10
        until: wait_asm_gateway.rc == 0
      when: canary | lower == 'true' or virtual_service | lower == 'true'

    - name: Install Kiali Operator
      shell: >
        helm upgrade --install \
          --values custom-values/kiali-custom-values.yaml \
          --namespace kiali-operator \
          --create-namespace \
          kiali-operator kiali/kiali-operator
      register: kiali_install

    - name: Apply routing rules for monitoring services
      shell: kubectl apply -f ./monitoring-virtualservice.yaml
      when: canary | lower == 'true' or virtual_service | lower == 'true'

    - name: Check if custom namespace exists
      shell: kubectl get namespace {{ app_namespace }}
      register: namespace_check
      ignore_errors: true

    - name: Create custom namespace
      shell: kubectl create namespace {{ app_namespace }}
      when: namespace_check.rc != 0

    - name: Label custom namespace for istio injection
      shell: |
        kubectl label namespace {{ app_namespace }} istio-injection=enabled --overwrite=true
      register: label_app